# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import gbft_pb2 as gbft__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class EntityCommStub(object):
    """Missing associated documentation comment in .proto file."""

    # 初始化与BFT实体的gRPC客户端连接
    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.send_decision = channel.unary_unary(
                '/EntityComm/send_decision',
                request_serializer=gbft__pb2.LearningData.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class EntityCommServicer(object):
    """Missing associated documentation comment in .proto file."""

    # 接收学习代理发送的协议决策
    def send_decision(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


# 将EntityComm服务注册到gRPC服务器
def add_EntityCommServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'send_decision': grpc.unary_unary_rpc_method_handler(
                    servicer.send_decision,
                    request_deserializer=gbft__pb2.LearningData.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'EntityComm', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EntityComm(object):
    """Missing associated documentation comment in .proto file."""

    # 向BFT实体发送协议选择决策
    @staticmethod
    def send_decision(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EntityComm/send_decision',
            gbft__pb2.LearningData.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AgentCommStub(object):
    """Missing associated documentation comment in .proto file."""

    # 初始化与学习代理的gRPC客户端连接
    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.send_data = channel.unary_unary(
                '/AgentComm/send_data',
                request_serializer=gbft__pb2.LearningData.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class AgentCommServicer(object):
    """Missing associated documentation comment in .proto file."""

    # 接收BFT实体发送的性能特征数据
    def send_data(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


# 将AgentComm服务注册到gRPC服务器
def add_AgentCommServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'send_data': grpc.unary_unary_rpc_method_handler(
                    servicer.send_data,
                    request_deserializer=gbft__pb2.LearningData.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AgentComm', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AgentComm(object):
    """Missing associated documentation comment in .proto file."""

    # 向学习代理发送性能特征数据
    @staticmethod
    def send_data(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AgentComm/send_data',
            gbft__pb2.LearningData.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
